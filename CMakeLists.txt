####################################################################################################
# CMakeLists file for FeedbackDelay
# Generated by Mads Kjeldgaard
# 2025-02-07
####################################################################################################

####################################################################################################
# basic project config
cmake_minimum_required(VERSION 3.12)
set(project_name "FeedbackDelay")
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake_modules ${CMAKE_MODULE_PATH})
set(CMAKE_CXX_STANDARD 20)

# compile commands
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Load CPM
include(cmake_modules/CPM.cmake)

# If SC_PATH variable is not set, download SuperCollider source via CPM and set SC_PATH variable
if(NOT DEFINED SC_PATH)
  message(STATUS "SC_PATH not set, downloading SuperCollider source")
  CPMAddPackage(
    NAME SuperCollider
    GITHUB_REPOSITORY supercollider/supercollider
    GIT_TAG develop
    DOWNLOAD_ONLY TRUE
  )
  set(SC_PATH ${SuperCollider_SOURCE_DIR})
endif()

# Download safety-limiter package
CPMAddPackage(
  NAME safety-limiter
  GITHUB_REPOSITORY nhthn/safety-limiter
  GIT_TAG develop
  DOWNLOAD_ONLY TRUE
)

# Add include directory for safety-limiter
include_directories(${safety-limiter_SOURCE_DIR})

####################################################################################################
# load modules
include(SuperColliderServerPlugin RESULT_VARIABLE server_plugin_found)
if(NOT server_plugin_found)
    message(FATAL_ERROR "Could not find server plugin functions module")
endif()

include(SuperColliderCompilerConfig RESULT_VARIABLE compiler_config_found)
if(NOT compiler_config_found)
    message(FATAL_ERROR "Could not find compiler config module")
endif()

# Windows - puts redistributable DLLs in install directory
include(InstallRequiredSystemLibraries)

sc_check_sc_path("${SC_PATH}")
message(STATUS "Found SuperCollider: ${SC_PATH}")
set(SC_PATH "${SC_PATH}" CACHE PATH "Path to SuperCollider source. Relative paths are treated as relative to this script" FORCE)

include("${SC_PATH}/SCVersion.txt")
message(STATUS "Building plugins for SuperCollider version: ${SC_VERSION}")

# set project here to avoid SCVersion.txt clobbering our version info
project(${project_name})
sc_do_initial_compiler_config() # do after setting project so compiler ID is available

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT OR NOT CMAKE_INSTALL_PREFIX)
    message(WARNING "No install prefix provided, defaulting to $BUILD_DIR/install")
    set(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/install" CACHE PATH "Install prefix" FORCE)
endif()

message(STATUS "Install directory set to: ${CMAKE_INSTALL_PREFIX}")

####################################################################################################
# options
option(SUPERNOVA "Build plugins for supernova" ON)
option(SCSYNTH "Build plugins for scsynth" ON)
option(NATIVE "Optimize for native architecture" ON)
option(STRICT "Use strict warning flags" ON)
option(NOVA_SIMD "Build plugins with nova-simd support." ON)

####################################################################################################
# include libraries

if (NOVA_SIMD)
	add_definitions(-DNOVA_SIMD)
	include_directories(${SC_PATH}/external_libraries/nova-simd)
endif()

####################################################################################################
# Begin target FeedbackDelay

# SpaceTub
set(SpaceTub_cpp_files
    plugins/SpaceTub/SpaceTub.cpp
    plugins/SpaceTub/SpaceTub.hpp
)
set(SpaceTub_sc_files
    plugins/SpaceTub/SpaceTub.sc
)
set(SpaceTub_schelp_files
    plugins/SpaceTub/SpaceTub.schelp
)

sc_add_server_plugin(
    "SpaceTub/SpaceTub" # desination directory
    "SpaceTub" # target name
    "${SpaceTub_cpp_files}"
    "${SpaceTub_sc_files}"
    "${SpaceTub_schelp_files}"
)

target_include_directories("SpaceTub_scsynth" PRIVATE ${safety-limiter_SOURCE_DIR})
target_include_directories("SpaceTub_supernova" PRIVATE ${safety-limiter_SOURCE_DIR})

# FeedbackDelay
set(FeedbackDelay_cpp_files
    plugins/FeedbackDelay/FeedbackDelay.cpp
    plugins/FeedbackDelay/FeedbackDelay.hpp
)
set(FeedbackDelay_sc_files
    plugins/FeedbackDelay/FeedbackDelay.sc
)
set(FeedbackDelay_schelp_files
    plugins/FeedbackDelay/FeedbackDelay.schelp
)

sc_add_server_plugin(
    "FeedbackDelay/FeedbackDelay" # desination directory
    "FeedbackDelay" # target name
    "${FeedbackDelay_cpp_files}"
    "${FeedbackDelay_sc_files}"
    "${FeedbackDelay_schelp_files}"
)


# VAStateVariableFilter
set(VAStateVariableFilter_cpp_files
    plugins/VAStateVariableFilter/VAStateVariableFilter.cpp
    plugins/VAStateVariableFilter/VAStateVariableFilter.hpp
)
set(VAStateVariableFilter_sc_files
    plugins/VAStateVariableFilter/VAStateVariableFilter.sc
)
set(VAStateVariableFilter_schelp_files
    plugins/VAStateVariableFilter/VAStateVariableFilter.schelp
)

sc_add_server_plugin(
    "VAStateVariableFilter/VAStateVariableFilter" # desination directory
    "VAStateVariableFilter" # target name
    "${VAStateVariableFilter_cpp_files}"
    "${VAStateVariableFilter_sc_files}"
    "${VAStateVariableFilter_schelp_files}"
)
