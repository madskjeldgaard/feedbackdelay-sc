name: Build Plugin

# Set your project name here
env:
  PROJECT_NAME: "FeedbackDelay"

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch: # Allow manual triggering for testing

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      matrix:
        os: [macos-14, macos-13, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Get SuperCollider source
      timeout-minutes: 8
      id: git_clone
      continue-on-error: true
      run: git clone --depth 1 https://github.com/supercollider/supercollider.git ${{ github.workspace }}/supercollider

    - name: Fallback SuperCollider download
      if: steps.git_clone.outcome == 'failure'
      timeout-minutes: 5
      shell: pwsh
      run: |
        Write-Host "Git clone failed, downloading zip..."
        Invoke-WebRequest -Uri "https://github.com/supercollider/supercollider/archive/refs/heads/main.zip" -OutFile "sc.zip"
        Expand-Archive -Path "sc.zip" -DestinationPath "."
        Move-Item "supercollider-main" "${{ github.workspace }}/supercollider"

    - name: Create build environment
      run: cmake -E make_directory ${{ github.workspace }}/build

    - name: Configure CMake (Unix)
      if: matrix.os != 'windows-latest'
      shell: bash
      working-directory: ${{ github.workspace }}/build
      run: cmake .. -DCMAKE_BUILD_TYPE='Release' -DSC_PATH=${{ github.workspace }}/supercollider -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      working-directory: ${{ github.workspace }}\build
      run: cmake .. -DCMAKE_BUILD_TYPE='Release' -DSC_PATH="${{ github.workspace }}\supercollider" -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}\install"

    - name: Build plugin
      working-directory: ${{ github.workspace }}/build
      run: cmake --build . --config "Release"

    - name: Install plugin to bundle directory
      working-directory: ${{ github.workspace }}/build
      run: cmake --install . --config "Release"

    - name: Create plugin bundle (macOS-14)
      if: matrix.os == 'macos-14'
      shell: bash
      working-directory: ${{ github.workspace }}/install
      run: |
        # Create zip from the installed plugin folder
        zip -r ${{ github.workspace }}/build/${{ env.PROJECT_NAME }}-macOS-ARM.zip .

    - name: Create plugin bundle (macOS-13)
      if: matrix.os == 'macos-13'
      shell: bash
      working-directory: ${{ github.workspace }}/install
      run: |
        # Create zip from the installed plugin folder
        zip -r ${{ github.workspace }}/build/${{ env.PROJECT_NAME }}-macOS-Intel.zip .

    - name: Create plugin bundle (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      working-directory: ${{ github.workspace }}\install
      run: |
        # Create zip from the installed plugin folder
        Compress-Archive -Path "." -DestinationPath "${{ github.workspace }}\build\${{ env.PROJECT_NAME }}-Windows.zip" -Force

    # Store as artifacts - works for both manual runs and tag pushes
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-${{ matrix.os }}
        path: ${{ github.workspace }}/build/${{ env.PROJECT_NAME }}-*.zip
  release:
      needs: build
      runs-on: ubuntu-latest
      steps:

        # Create release
        - name: Create GitHub Release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ github.ref_name }}
            release_name: ${{ github.ref_name }}
            draft: false
            prerelease: false

      # Download assets from build job
        - name: Download macOS ARM artifact
          uses: actions/download-artifact@v4
          with:
            name: FeedbackDelay-macos-14
            path: artifacts/

        - name: Download macOS Intel artifact
          uses: actions/download-artifact@v4
          with:
            name: FeedbackDelay-macos-13
            path: artifacts/

        - name: Download Windows artifact
          uses: actions/download-artifact@v4
          with:
            name: FeedbackDelay-windows-latest
            path: artifacts/

        # Upload all assets
        - name: Upload macOS ARM asset
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: artifacts/FeedbackDelay-macOS-ARM.zip
            asset_name: FeedbackDelay-macOS-ARM.zip
            asset_content_type: application/zip

        - name: Upload macOS Intel asset
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: artifacts/FeedbackDelay-macOS-Intel.zip
            asset_name: FeedbackDelay-macOS-Intel.zip
            asset_content_type: application/zip

        - name: Upload Windows asset
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: artifacts/FeedbackDelay-Windows.zip
            asset_name: FeedbackDelay-Windows.zip
            asset_content_type: application/zip
