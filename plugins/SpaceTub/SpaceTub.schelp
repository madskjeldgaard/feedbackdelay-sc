class:: SpaceTub
summary:: A feedback delay plugin for SuperCollider
related:: TODO
categories:: UGens>TODO

description::

A tape delay inspired echo delay with a softclipper, limiter and state variable filter in the feedback path.

classmethods::

method::ar

argument::in
Audio input

argument::maxdelaytime

Max delay time in seconds

argument::delaytime

Delay time in seconds

argument::feedback

argument::cutoff
Cutoff frequency in Hz

argument::resonance
resonance amount (0.0 to 1.0)

argument::filterType
Filter type (0=lowpass, 1=highpass, 2=bandpass, 3=unity gain bandpass, 4=band
shelving, 5=notch, 6=allpass, 7=peaking)

argument::limiterOn
Limiter on/off in feedback path: 0=off, 1=on

argument::limiterRelease
Limiter release time in seconds

argument::limiterHoldTime
Limiter hold time in seconds

argument::useSoftClip
Use soft clipper in feedback path: 0=off, 1=on

examples::

code::
(
s.waitForBoot{
    s.sync;
    b = Buffer.read(s, Platform.resourceDir +/+ "sounds/a11wlk01.wav");
    s.sync;

    Ndef(\delaytest,{|amp=0.5|
        var maxDelayTime = 1;
        var input = PlayBuf.ar(1, b.bufnum, BufRateScale.kr(b.bufnum), 1, 0, 1);
        var crossfade = \crossfade.ar(0.5, 0.1, spec: [-1,1,\lin]);
        var spread = \spread.ar(0.5, 0.1, spec: [0,1,\lin]);
        var delayTime = \delayTime.ar(0.5, 0.1, spec: [0.01,maxDelayTime,\lin]);
        var feedback = \feedback.ar(0.5, 0.1, spec: [0,1.5,\lin]);
        var cutoff = \cutoff.ar(1500, 0.1, spec: [50,15000,\exp]);
        var limRelease = \limRelease.ar(0.5, 0.1, spec: [0.01,1,\lin]);
        var limHoldTime = \limHoldTime.ar(0.01, 0.1, spec: [0.01,1,\lin]);
        var res = \res.ar(0.5, 0.1, spec: [0.1,1.0,\lin]);
        var type = \type.ar(0, 0.1, spec: [0,7,\lin,1]);
        var clipOn = \clipOn.ar(1, 0.0, spec: [0,1,\lin, 1]);
        var limitOn = \limitOn.ar(1, 0.0, spec: [0,1,\lin, 1]);
        var delayed = SpaceTub.ar(
            in: input,
            maxdelaytime: maxDelayTime,
            delaytime: delayTime * [1, 1 + (spread/10.0)],
            feedback: feedback,
            cutoff: cutoff,
            resonance: res,
            filterType: type,
            limiterOn: limitOn,
            limiterRelease: limRelease,
            limiterHoldTime: limHoldTime,
            useSoftClip: clipOn
        );

        XFade2.ar(input, delayed, crossfade) * amp
    });

    s.sync;
    Ndef(\delaytest).play;

    Ndef(\delaytest).gui;
}
)
::
